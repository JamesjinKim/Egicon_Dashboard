================================================================================
                    EG-DASH 실시간 센서 대시보드 시스템
                        프로젝트 요구사항 문서 (PRD)
================================================================================

📋 문서 정보
- 프로젝트명: EG-Dash (Easy Dashboard)
- 버전: v3.0
- 작성일: 2025.06.18
- 개발팀: ShinHoTechnology
- 문서 유형: Product Requirements Document

================================================================================
📖 목차
================================================================================
1. 프로젝트 개요
2. 시스템 요구사항
3. 기능 요구사항
4. 비기능 요구사항
5. 기술 아키텍처
6. 사용자 인터페이스 요구사항
7. 성능 요구사항
8. 보안 요구사항
9. 배포 및 운영 요구사항
10. 확장성 및 미래 계획

================================================================================
1. 프로젝트 개요
================================================================================

1.1 프로젝트 목적
• 라즈베리파이 4 기반 실시간 센서 모니터링 시스템 구축
• BME688(온도/습도/압력/가스), BH1750(조도),SHT40, DPS810, SPS30 센서 데이터 실시간 수집 및 시각화
• 웹 기반 대시보드를 통한 직관적인 데이터 모니터링 환경 제공
• IoT 센서 데이터의 실시간 분석 및 트렌드 파악

1.2 프로젝트 범위
• 실제 하드웨어 센서 연동 (BME688, BH1750, SHT40, DPS810, SPS30)
• Flask 기반 웹 애플리케이션 개발
• 실시간 데이터 수집 및 처리
• 웹 대시보드 UI/UX 구현
• 차트 기반 데이터 시각화
• 모바일/데스크톱 반응형 디자인

1.3 대상 사용자
• IoT 개발자 및 엔지니어
• 환경 모니터링 담당자
• 데이터 분석가

1.4 성공 지표
• 실시간 데이터 업데이트 (3초 간격)
• 99% 센서 데이터 수집 성공률
• 모든 주요 브라우저에서 정상 동작
• 24시간 연속 운영 안정성

================================================================================
2. 시스템 요구사항
================================================================================

2.1 하드웨어 요구사항
• 기본 플랫폼: Raspberry Pi 4 (4GB RAM 이상 권장)
• 센서 모듈:
  - BME688: 온도, 습도, 압력, 가스저항 측정
  - BH1750: 고정밀 조도 측정
• 인터페이스: I2C 통신 (GPIO 2/3 핀)
• 네트워크: Wi-Fi 또는 이더넷 연결
• 저장장치: microSD 카드 (32GB 이상)

2.2 소프트웨어 요구사항
• 운영체제: Raspberry Pi OS (Debian 기반)
• Python 버전: 3.7 이상
• 필수 라이브러리:
  - Flask 2.x (웹 프레임워크)
  - Flask-CORS (크로스 도메인 지원)
  - smbus2 (I2C 통신)
  - sqlite3 (데이터베이스)
• 웹 브라우저: Chrome, Firefox, Safari, Edge 최신 버전

2.3 네트워크 요구사항
• 로컬 네트워크 연결 (Wi-Fi/이더넷)
• HTTP 포트 5003 개방
• CORS 지원으로 다양한 도메인에서 접근 가능

================================================================================
3. 기능 요구사항
================================================================================

3.1 센서 데이터 수집 기능
• BME688 센서 데이터 수집:
  - 온도 측정 (°C, ±1.0°C 정확도)
  - 습도 측정 (%, ±3% 정확도)
  - 압력 측정 (hPa, ±1.0hPa 정확도)
  - 가스저항 측정 (Ω, 공기질 지수 계산)
• BH1750 센서 데이터 수집:
  - 조도 측정 (lux, ±20% 정확도)
• SHT40 센서 데이터 수집:
  - 고정밀 온도 측정 (°C, ±0.2°C 정확도)
  - 고정밀 습도 측정 (%, ±1.8% 정확도)
• SDP810 센서 데이터 수집:
  - 차압 측정 (Pa, ±0.2Pa 정확도)
• SPS30 센서 데이터 수집:
  - 미세먼지 측정 (PM1.0, PM2.5, PM4.0, PM10)
  - 입자 수 농도 측정
• 자동 센서 검색 및 연결
• 센서 연결 실패 시 폴백 시스템 동작

3.2 데이터 처리 기능
• 실시간 데이터 수집 (3초 간격)
• SQLite 데이터베이스에 데이터 저장
• 데이터베이스 마이그레이션 지원
• 가스저항을 공기질 지수(0-100)로 변환
• 데이터 유효성 검증 및 오류 처리
• 센서 상태 모니터링

3.3 웹 API 기능
• RESTful API 엔드포인트:
  - GET / : 메인 대시보드 페이지
  - GET /dashboard : 대시보드 페이지 (별칭)
  - GET /api/current : 현재 센서 데이터 조회
  - GET /api/status : 센서 연결 상태 확인
• JSON 형식 데이터 응답
• CORS 지원으로 크로스 도메인 요청 처리
• 에러 핸들링 (404, 500 에러)

3.4 데이터 시각화 기능
• 실시간 센서 위젯 (6개):
  - 온도, 습도, 조도, 차압, 진동, 공기질
• 개별 센서 차트:
  - Chart.js 기반 라인/바 차트
  - 24시간 히스토리 데이터 표시
• 통합 센서 차트:
  - 모든 센서 데이터 동시 표시
  - 다중 축 스케일링
• 실시간 데이터 업데이트

================================================================================
4. 비기능 요구사항
================================================================================

4.1 성능 요구사항
• 데이터 수집 주기: 3초 간격
• API 응답 시간: 1초 이내
• 페이지 로딩 시간: 3초 이내
• 동시 사용자: 최대 10명
• 24시간 연속 운영 안정성

4.2 안정성 요구사항
• 센서 연결 실패 시 자동 폴백
• 예외 상황 처리 및 로깅
• 서버 재시작 시 자동 복구
• 무한 루프 및 메모리 누수 방지

4.3 사용성 요구사항
• 직관적인 사용자 인터페이스
• 반응형 디자인 (모바일/데스크톱)
• 컬러 코딩된 센서 위젯
• 사용자 매뉴얼 제공

4.4 유지보수성 요구사항
• 모듈화된 코드 구조
• 명확한 함수/클래스 분리
• 상세한 주석 및 문서화
• 테스트 도구 제공

================================================================================
5. 기술 아키텍처
================================================================================

5.1 시스템 아키텍처
```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   실제 센서       │───▶│  센서 매니저        │───▶│   Flask API     │───▶│   웹 대시보드      │
│                 │    │                  │    │                 │    │                 │
│ • BME688        │    │ • 자동 검색        │    │ • REST API      │    │ • 실시간 위젯      │
│   - 온도/습도     │    │ • I2C 통신        │    │ • 폴백 처리        │    │ • 개별 차트       │
│   - 압력/가스     │    │ • 데이터 변환       │    │ • 상태 모니터      │    │ • 통합 차트       │
│ • BH1750        │    │ • 에러 처리        │    │ • CORS 지원      │    │ • 사이드바 UI     │
│   - 조도         │    │                  │    │                 │    │                 │
└─────────────────┘    └──────────────────┘    └─────────────────┘    └─────────────────┘
```

5.2 소프트웨어 구조
• Backend: Python Flask
  - sensor_api_simple.py: 메인 API 서버
  - sensor_manager.py: 센서 관리 클래스
  - constants.py: BME688 센서 상수
  - test_sensors.py: 센서 테스트 도구
• Frontend: HTML5/CSS3/JavaScript
  - templates/: Flask Jinja2 템플릿
  - static/css/: 스타일시트
  - static/js/: JavaScript (Chart.js 포함)
• Communication: HTTP REST API + CORS

5.3 데이터 플로우
1. 센서 매니저가 I2C를 통해 센서 데이터 수집
2. 수집된 데이터를 JSON 형식으로 변환
3. Flask API가 HTTP 엔드포인트로 데이터 제공
4. 웹 클라이언트가 3초 간격으로 API 호출
5. Chart.js를 사용하여 실시간 시각화

================================================================================
6. 사용자 인터페이스 요구사항
================================================================================

6.1 전체 UI 구조
• 사이드바 네비게이션
• 메인 컨텐츠 영역
• 실시간 센서 위젯 섹션
• 개별 센서 차트 섹션
• 통합 센서 차트 섹션

6.2 센서 위젯 요구사항
• 6개 센서별 컬러 코딩된 위젯
• 실시간 수치 표시
• 단위 표시 (°C, %, lux, Pa, g, /100)
• 아이콘 기반 직관적 식별

6.3 차트 요구사항
• Chart.js 기반 구현
• 라인 차트: 온도, 습도, 차압, 공기질
• 바 차트: 조도, 진동
• 24시간 히스토리 데이터
• 반응형 차트 크기 조정

6.4 반응형 디자인
• 데스크톱: 그리드 레이아웃
• 태블릿: 적응형 레이아웃
• 모바일: 스택 레이아웃
• 터치 친화적 인터페이스

================================================================================
7. 성능 요구사항
================================================================================

7.1 실시간 성능
• 센서 데이터 수집: 3초 간격
• API 응답 시간: 평균 500ms 이하
• UI 업데이트 지연: 100ms 이하
• 차트 렌더링: 1초 이하

7.2 시스템 자원
• CPU 사용률: 평균 30% 이하
• 메모리 사용량: 512MB 이하
• 네트워크 대역폭: 최소 1Mbps
• 저장 공간: 100MB 이하

7.3 확장성
• 동시 접속자: 최대 10명
• 추가 센서 연결 가능성
• 데이터 히스토리 확장 가능

================================================================================
8. 보안 요구사항
================================================================================

8.1 네트워크 보안
• HTTPS 지원 (선택사항)
• CORS 정책 설정
• 방화벽 포트 관리 (5002)
• 로컬 네트워크 접근 제한

8.2 데이터 보안
• 센서 데이터 무결성 검증
• 에러 로그 관리
• 민감 정보 노출 방지
• 입력 데이터 검증

8.3 시스템 보안
• OS 보안 업데이트
• 서비스 권한 최소화
• 로그 접근 제어
• 백업 및 복구 계획

================================================================================
9. 배포 및 운영 요구사항
================================================================================

9.1 설치 요구사항
• 자동화된 설치 스크립트
• 의존성 패키지 자동 설치
• I2C 인터페이스 자동 활성화
• 서비스 자동 등록

9.2 운영 요구사항
• 시스템 서비스로 등록
• 자동 시작/재시작 기능
• 로그 로테이션
• 모니터링 및 알림

9.3 백업 및 복구
• 설정 파일 백업
• 시스템 복구 절차
• 센서 교체 시 재설정
• 데이터 마이그레이션

9.4 테스트 및 검증
• test_sensors.py를 통한 시스템 테스트
• 센서 연결 상태 검증
• API 기능 테스트
• UI 브라우저 호환성 테스트

================================================================================
10. 확장성 및 미래 계획
================================================================================

10.1 센서 확장성
• 추가 센서 모듈 지원
• 플러그인 아키텍처 도입
• 센서 설정 동적 변경
• 다중 센서 노드 지원

10.2 기능 확장
• 데이터 로깅 및 저장
• 알림 및 경고 시스템
• 데이터 내보내기 기능
• 모바일 앱 개발

10.3 성능 개선
• 데이터베이스 도입
• 캐싱 시스템 구현
• 로드 밸런싱
• 클러스터링 지원

10.4 AI/ML 통합
• 센서 데이터 예측 분석
• 이상 탐지 알고리즘
• 자동 보정 시스템
• 패턴 분석 및 학습

================================================================================
부록: 기술 스택 상세
================================================================================

A.1 Backend 기술 스택
• Python 3.12
• Flask 2.3 (웹 프레임워크)
• Flask-CORS (크로스 도메인 지원)
• smbus2 (I2C 통신 라이브러리)

A.2 Frontend 기술 스택
• HTML5 (마크업)
• CSS3 (스타일링)
• JavaScript ES6+ (클라이언트 로직)
• Chart.js 3.9.1 (데이터 시각화)
• Font Awesome 6.4.0 (아이콘)

A.3 개발 도구
• Git (버전 관리)
• VS Code (개발 환경)
• Chrome DevTools (디버깅)
• Postman (API 테스트)

================================================================================
문서 승인
================================================================================
• 작성자: ShinHoTechnology 개발팀
• 검토자: 프로젝트 매니저
• 승인자: 기술 총괄
• 승인일: 2025.06.11

================================================================================
변경 이력
================================================================================
v1.0 (2025.01.01) - 초기 PRD 작성
v2.0 (2025.06.11) - Flask UI 구조 개선 반영, 실제 구현 사항 업데이트
v3.0 (2025.06.18) - 5개 센서 완전 지원, 데이터베이스 연동, Settings 페이지 추가